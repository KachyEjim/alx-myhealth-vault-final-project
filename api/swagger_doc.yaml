swagger: "2.0"
info:
  description: |
    # API Documentation

    Welcome to the API documentation for our healthcare management system. This API allows developers to interact with various resources related to appointments, users, medical records, and medications. It follows industry standards and utilizes JSON Web Tokens (JWT) for secure authentication.

    ## How to Use the API

    To interact with the API, follow these steps:

    1. **Authentication**:
       - The API uses JWT for authentication. To access protected routes, you must first obtain a JWT by logging in with your credentials.
       - **Login Endpoint**: Send a POST request to the `/api/login` endpoint with your email and password in the request body. Upon successful login, the API will return a JWT, which you need to include in the `Authorization` header of your requests to access protected resources.
       - **Example Login Request**:
         ```http
         POST /api/login
         Content-Type: application/json

         {
           "email": "user@example.com",
           "password": "yourpassword"
         }
         ```

       - **Example Successful Login Response**:
         ```json
         {
           "access_token": "your_jwt_token",
           "refresh_token": "your_refresh_token"
         }
         ```

    2. **Authorization**:
       - Include the JWT in the `Authorization` header of your requests as follows:
         ```
         Authorization: Bearer your_jwt_token_here
         ```

    3. **Making API Requests**:
       - All requests should be made to the base URL: `https://myhealthvault-backend.onrender.com`.
       - Use the appropriate HTTP methods (GET, POST, PUT, DELETE) as specified for each endpoint.
       - The API supports JSON format for requests and responses.

    ## Available Endpoints

    Here is a list of all API endpoints along with descriptions and how to call them:

    ### 1. **Authentication**

    - **Login**  
      **POST** `/api/login`  
      Authenticates a user and returns a JWT.  
      **Request Body**:
      ```json
      {
        "email": "user@example.com",
        "password": "yourpassword"
      }
      ```

    ### 2. **User Management**

    - **Create User**  
      **POST** `/api/users`  
      Registers a new user in the system.  
      **Request Body**:
      ```json
      {
        "full_name": "John Doe",
        "email": "john@example.com",
        "password": "securepassword",
        "phone_number": "1234567890",
        "gender": "male",
        "address": "123 Main St",
        "age": 30
      }
      ```

    - **Get User Details**  
      **GET** `/api/users/{id}`  
      Retrieves the details of a user by their ID.  
      **Authorization**: Requires a valid JWT.  
      **Example Request**:  
      ```http
      GET /api/users/1
      Authorization: Bearer your_jwt_token_here
      ```

    - **Update User**  
      **PUT** `/api/users/{id}`  
      Updates user information.  
      **Authorization**: Requires a valid JWT.  
      **Request Body**:
      ```json
      {
        "full_name": "Jane Doe",
        "email": "jane@example.com",
        "phone_number": "0987654321",
        "address": "456 Side St"
      }
      ```

    - **Delete User**  
      **DELETE** `/api/users/{id}`  
      Deletes a user from the system.  
      **Authorization**: Requires a valid JWT.

    ### 3. **Appointments**

    - **Create Appointment**  
      **POST** `/api/appointments`  
      Creates a new appointment for a user.  
      **Request Body**:
      ```json
      {
        "user_id": "1",
        "doctor_id": "2",
        "start_time": "2024-10-26T10:00:00Z",
        "end_time": "2024-10-26T11:00:00Z",
        "description": "Checkup appointment"
      }
      ```

    - **Get Appointments**  
      **GET** `/api/appointments`  
      Retrieves all appointments for the authenticated user.  
      **Authorization**: Requires a valid JWT.

    - **Get Appointment by ID**  
      **GET** `/api/appointments/{id}`  
      Retrieves a specific appointment by its ID.  
      **Authorization**: Requires a valid JWT.

    - **Update Appointment**  
      **PUT** `/api/appointments/{id}`  
      Updates an existing appointment.  
      **Authorization**: Requires a valid JWT.  
      **Request Body**:
      ```json
      {
        "description": "Updated description"
      }
      ```

    - **Delete Appointment**  
      **DELETE** `/api/appointments/{id}`  
      Deletes an appointment by its ID.  
      **Authorization**: Requires a valid JWT.

    ### 4. **Medical Records**

    - **Create Medical Record**  
      **POST** `/api/medical_records`  
      Creates a new medical record.  
      **Request Body**:
      ```json
      {
        "record_name": "X-ray results",
        "health_care_provider": "City Hospital",
        "type_of_record": "Radiology",
        "diagnosis": "Fractured leg",
        "notes": "Patient advised to rest",
        "file_path": "/files/record123.pdf",
        "status": "final",
        "practitioner_name": "Dr. John Doe"
      }
      ```

    - **Get Medical Records**  
      **GET** `/api/medical_records`  
      Retrieves all medical records for the authenticated user.  
      **Authorization**: Requires a valid JWT.

    - **Get Medical Record by ID**  
      **GET** `/api/medical_records/{id}`  
      Retrieves a specific medical record by its ID.  
      **Authorization**: Requires a valid JWT.

    - **Update Medical Record**  
      **PUT** `/api/medical_records/{id}`  
      Updates an existing medical record.  
      **Authorization**: Requires a valid JWT.

    - **Delete Medical Record**  
      **DELETE** `/api/medical_records/{id}`  
      Deletes a medical record by its ID.  
      **Authorization**: Requires a valid JWT.

    ### 5. **Medications**

    - **Create Medication**  
      **POST** `/api/medications`  
      Creates a new medication entry.  
      **Request Body**:
      ```json
      {
        "name": "Aspirin",
        "when": "2024-10-16",
        "time": "08:00",
        "status": "active"
      }
      ```

    - **Get Medications**  
      **GET** `/api/medications`  
      Retrieves all medications for the authenticated user.  
      **Authorization**: Requires a valid JWT.

    - **Get Medication by ID**  
      **GET** `/api/medications/{id}`  
      Retrieves a specific medication by its ID.  
      **Authorization**: Requires a valid JWT.

    - **Update Medication**  
      **PUT** `/api/medications/{id}`  
      Updates an existing medication entry.  
      **Authorization**: Requires a valid JWT.

    - **Delete Medication**  
      **DELETE** `/api/medications/{id}`  
      Deletes a medication entry by its ID.  
      **Authorization**: Requires a valid JWT.

  version: "1.0.0"
  title: "Patient Management API"

host: "myhealthvault-backend.onrender.com"
basePath: "/api"
schemes:
  - https
  - http

paths:
  /signup:
    post:
      tags:
        - "UserAuth"
      summary: "Register a new user"
      description: |
        Registers a new user by creating an account with required details
        (full name, email, password) and optional fields (phone number, address, gender, age).
      parameters:
        - in: body
          name: body
          required: true
          description: "User registration details"
          schema:
            type: object
            properties:
              full_name:
                type: string
                example: "John Doe"
                description: "Full name of the user"
              email:
                type: string
                example: "john.doe@example.com"
                description: "Email address of the user"
              password:
                type: string
                example: "your_secure_password"
                description: "User's password (required)"
              phone_number:
                type: string
                example: "+1234567890"
                description: "User's phone number (optional)"
              gender:
                type: string
                enum: ["Male", "Female", "Other"]
                default: "Other"
                description: "User's gender (optional)"
              address:
                type: string
                example: "123 Main Street, City, Country"
                description: "User's address (optional)"
              age:
                type: integer
                example: 30
                description: "User's age (optional)"
      responses:
        201:
          description: "User registered successfully"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "User registered successfully! Verification email sent."
              status:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 201
              data:
                $ref: "#/definitions/User" # Assuming User is defined under `definitions`
        400:
          description: "Missing required fields or email already in use"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "MISSING_FIELDS or USER_EXISTS"
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 400
              msg:
                type: string
                example: "Full name, email, and password are required."
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 500
              msg:
                type: string
                example: "An unexpected error occurred."

  /login:
    post:
      tags:
        - "UserAuth"
      summary: "User login"
      description: |
        Authenticates a user by verifying their email and password. 
        Returns access and refresh tokens if successful.
      parameters:
        - in: body
          name: body
          required: true
          description: "Login credentials."
          schema:
            type: object
            properties:
              email:
                type: string
                example: "john.doe@example.com"
                description: "User's email address."
              password:
                type: string
                example: "your_secure_password"
                description: "User's password."
      responses:
        200:
          description: "Login successful."
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Login successful."
                description: "Success message."
              status:
                type: boolean
                example: true
                description: "Indicates whether the login was successful."
              statusCode:
                type: integer
                example: 200
                description: "HTTP status code for successful login."
              access_token:
                type: string
                example: "access_token_here"
                description: "Access token for authorized requests."
              refresh_token:
                type: string
                example: "refresh_token_here"
                description: "Refresh token for renewing access."
              user:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "User ID."
                  email:
                    type: string
                    example: "john.doe@example.com"
                    description: "User's email address."
                  role:
                    type: string
                    example: "user"
                    description: "User's role."
        401:
          description: "Invalid email or password."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INVALID_CREDENTIALS"
                description: "Error code for invalid credentials."
              status:
                type: boolean
                example: false
                description: "Indicates whether the login was successful."
              statusCode:
                type: integer
                example: 401
                description: "HTTP status code for invalid credentials."
              msg:
                type: string
                example: "Invalid email or password."
                description: "Error message for invalid credentials."
        403:
          description: "User not verified."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "USER_NOT_VERIFIED"
                description: "Error code for unverified users."
              status:
                type: boolean
                example: false
                description: "Indicates whether the login was successful."
              statusCode:
                type: integer
                example: 403
                description: "HTTP status code for unverified users."
              msg:
                type: string
                example: "Please verify your email before logging in."
                description: "Error message for unverified users."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
                description: "Error code for internal server errors."
              status:
                type: boolean
                example: false
                description: "Indicates whether the login was successful."
              statusCode:
                type: integer
                example: 500
                description: "HTTP status code for server error."
              msg:
                type: string
                example: "An unexpected error occurred."
                description: "Error message for unexpected server errors."

  /verify-email/{token}:
    get:
      tags:
        - "UserAuth"
      summary: "Verify user's email"
      description: "Verifies the user's email using the provided JWT token."
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: "JWT token used for email verification."
      responses:
        200:
          description: "Email verified successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  msg:
                    type: string
        400:
          description: "Invalid or expired token."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  error:
                    type: string
                  msg:
                    type: string
        404:
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  error:
                    type: string
                  msg:
                    type: string
        500:
          description: "Internal server error."

  /resend-verification:
    post:
      tags:
        - "UserAuth"
      summary: "Resend verification email"
      description: "Resends the email verification link to the user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "Email address of the user"
      responses:
        200:
          description: "Verification email resent successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  msg:
                    type: string
        404:
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  error:
                    type: string
                  msg:
                    type: string
        400:
          description: "User already verified."

  /reset-password/{token}:
    post:
      tags:
        - "UserAuth"
      summary: "Reset user password"
      description: "Resets the user's password using the provided JWT token."
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: "JWT token for password reset."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  description: "New password for the user."
      responses:
        200:
          description: "Password reset successful."
        400:
          description: "Invalid or expired token."
        404:
          description: "User not found."
        500:
          description: "Internal server error."

  /forgot-password:
    post:
      tags:
        - "UserAuth"
      summary: "Forgot password"
      description: "Sends a password reset link to the user's email."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "User's email address"
      responses:
        200:
          description: "Password reset email sent."
        404:
          description: "User not found."
        400:
          description: "Email is required."

  /change-password:
    post:
      tags:
        - "UserAuth"
      summary: "Change user password"
      description: "Allows a logged-in user to change their password."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  description: "Current password"
                new_password:
                  type: string
                  description: "New password"
      responses:
        200:
          description: "Password changed successfully."
        401:
          description: "Old password is incorrect."
        400:
          description: "Old and new passwords are required."

  /refresh:
    post:
      tags:
        - "UserAuth"
      summary: "Refresh access token"
      description: "Refreshes the user's access token."
      responses:
        200:
          description: "Access token refreshed."
        401:
          description: "Token is invalid or expired."

  /join_appointment/{appointment_id}:
    get:
      tags:
        - "Appointment"
      summary: "Join appointment"
      description: "Allows the user to join an appointment if it's currently ongoing."
      parameters:
        - in: path
          name: appointment_id
          required: true
          schema:
            type: string
          description: "ID of the appointment to join."
      responses:
        302:
          description: "Redirect to appointment URL."
        404:
          description: "Appointment not found."
        400:
          description: "Invalid appointment status."
        500:
          description: "Internal server error."

  /create_appointment/{user_id}:
    post:
      tags:
        - "Appointment"
      summary: "Create a new appointment for a user"
      description: |
        Allows a user to create an appointment by providing necessary details 
        such as start time, end time, description, and doctor ID.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: "ID of the user for whom the appointment is being created."
        - in: body
          name: body
          required: true
          description: "Details of the appointment to be created."
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                    example: "2024-10-15T14:00:00"
                    description: "Start time of the appointment in ISO 8601 format."
                  end_time:
                    type: string
                    format: date-time
                    example: "2024-10-15T15:00:00"
                    description: "End time of the appointment in ISO 8601 format."
                  description:
                    type: string
                    example: "General consultation"
                    description: "Brief description of the appointment."
                  doctor_id:
                    type: integer
                    example: 2
                    description: "ID of the doctor assigned to the appointment."
      responses:
        201:
          description: "Appointment successfully created."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Appointment"
        400:
          description: "Bad Request: Missing required fields or no input data found."
        404:
          description: "User not found."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /get_appointments/{user_id}:
    get:
      tags:
        - "Appointment"
      summary: "Retrieve appointments for a user"
      description: |
        Fetches appointments for a specific user, with optional filters such as start time, end time, status, and doctor ID.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: "ID of the user whose appointments are being retrieved."
        - in: query
          name: start_time
          schema:
            type: string
            format: date-time
          description: "Filter by the starting time of the appointment."
        - in: query
          name: end_time
          schema:
            type: string
            format: date-time
          description: "Filter by the ending time of the appointment."
        - in: query
          name: status
          schema:
            type: string
            enum: ["Upcoming", "Completed", "Missed", "Canceled"]
          description: "Filter by the status of the appointment."
        - in: query
          name: doctor_id
          schema:
            type: integer
          description: "Filter by doctor ID."
      responses:
        200:
          description: "List of user appointments."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/definitions/Appointment"
        404:
          description: "User not found or no appointments available."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /update_appointment/{appointment_id}:
    put:
      tags:
        - "Appointment"
      summary: "Update an existing appointment"
      description: |
        Updates the details of an appointment, including start time, 
        end time, description, doctor ID, and status.
      parameters:
        - in: path
          name: appointment_id
          required: true
          schema:
            type: integer
          description: "ID of the appointment to be updated."
        - in: body
          name: body
          required: true
          description: "Updated appointment details."
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                    example: "2024-10-16T15:00:00"
                    description: "New start time of the appointment in ISO 8601 format."
                  end_time:
                    type: string
                    format: date-time
                    example: "2024-10-16T16:00:00"
                    description: "New end time of the appointment in ISO 8601 format."
                  description:
                    type: string
                    example: "Updated appointment description"
                    description: "Updated description of the appointment."
                  doctor_id:
                    type: integer
                    example: 2
                    description: "Updated ID of the doctor assigned to the appointment."
      responses:
        200:
          description: "Appointment successfully updated."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Appointment"
        400:
          description: "No input data found."
        404:
          description: "Appointment not found."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /delete_appointment/{appointment_id}:
    delete:
      tags:
        - "Appointment"
      summary: "Delete an appointment"
      description: "Deletes an appointment by its ID."
      parameters:
        - in: path
          name: appointment_id
          required: true
          schema:
            type: integer
          description: "ID of the appointment to be deleted."
      responses:
        200:
          description: "Appointment successfully deleted."
        404:
          description: "Appointment not found."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /create_record/{user_id}:
    post:
      tags:
        - "MedicalRecords"
      summary: "Create a new medical record"
      description: "Creates a new medical record for a specified user with optional file attachment."
      parameters:
        - name: user_id
          in: path
          required: true
          description: "ID of the user for whom the medical record is being created."
          schema:
            type: string
        - in: formData
          name: record_name
          required: true
          description: "Name of the medical record."
          schema:
            type: string
            example: "Blood Test"
        - in: formData
          name: health_care_provider
          required: true
          description: "Name of the healthcare provider."
          schema:
            type: string
            example: "Dr. Smith"
        - in: formData
          name: type_of_record
          required: true
          description: "Type of medical record."
          schema:
            type: string
            example: "Lab Report"
        - in: formData
          name: diagnosis
          description: "Diagnosis details."
          schema:
            type: string
            example: "Anemia"
        - in: formData
          name: notes
          description: "Additional notes."
          schema:
            type: string
            example: "Follow up in 2 weeks."
        - in: formData
          name: status
          description: "Status of the record."
          schema:
            type: string
            example: "draft"
        - in: formData
          name: practitioner_name
          description: "Name of the practitioner."
          schema:
            type: string
            example: "Dr. Jane Doe"
        - in: formData
          name: file
          description: "File attachment for the medical record."
          required: false
          schema:
            type: string
            format: binary
      responses:
        "201":
          description: "Medical record created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Medical Records successfully created"
                  status:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 201
                  data:
                    type: object
                    properties:
                      record_id:
                        type: integer
                        example: 123
        "400":
          description: "Bad request. Invalid or missing input data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "BAD_REQUEST"
                  msg:
                    type: string
                    example: "Record name is required."
                  status:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "USER_NOT_FOUND"
                  msg:
                    type: string
                    example: "User not found."
                  status:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  msg:
                    type: string
                    example: "An unexpected error occurred."
                  status:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 500

  /user_records/{user_id}:
    get:
      tags:
        - "MedicalRecords"
      summary: "Get medical records for a user"
      description: "Retrieves all medical records for a specified user. Supports filtering, sorting, and limiting results."
      parameters:
        - name: user_id
          in: path
          required: true
          description: "ID of the user for whom medical records are being retrieved."
          schema:
            type: string
        - in: query
          name: limit
          required: false
          description: "Maximum number of records to retrieve."
          schema:
            type: integer
        - in: query
          name: sort_by
          required: false
          description: "Field by which to sort the records."
          schema:
            type: string
            example: "last_added"
        - in: query
          name: sort_order
          required: false
          description: "Order of sorting, either asc (ascending) or desc (descending)."
          schema:
            type: string
            enum: [asc, desc]
            example: "desc"
        - in: query
          name: record_name
          required: false
          description: "Filter by record name (case-insensitive)."
          schema:
            type: string
        - in: query
          name: type_of_record
          required: false
          description: "Filter by type of record."
          schema:
            type: string
        - in: query
          name: diagnosis
          required: false
          description: "Filter by diagnosis details."
          schema:
            type: string
      responses:
        "200":
          description: "Medical records retrieved successfully."
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Medical Records successfully retrieved"
              data:
                type: array
                items:
                  type: object
                  properties:
                    record_id:
                      type: integer
                      example: 123
                    record_name:
                      type: string
                      example: "Blood Test"
                    health_care_provider:
                      type: string
                      example: "Dr. Smith"
                    type_of_record:
                      type: string
                      example: "Lab Report"
                    diagnosis:
                      type: string
                      example: "Anemia"
                    notes:
                      type: string
                      example: "Follow up in 2 weeks."
                    status:
                      type: string
                      example: "draft"
        "404":
          description: "User or records not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "USER_NOT_FOUND or NO_RECORDS_FOUND"
              message:
                type: string
                example: "No records found for this user."
        "500":
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /update_record/{record_id}:
    put:
      tags:
        - "MedicalRecords"
      summary: "Update an existing medical record"
      description: "Updates the details of a specific medical record identified by record ID."
      parameters:
        - name: record_id
          in: path
          required: true
          description: "ID of the medical record to update."
          schema:
            type: string
        - in: body
          name: body
          required: true
          description: "Updated details of the medical record."
          schema:
            type: object
            properties:
              record_name:
                type: string
                description: "Updated name of the medical record."
                example: "Updated Blood Test"
              health_care_provider:
                type: string
                description: "Updated name of the healthcare provider."
                example: "Dr. John Doe"
              type_of_record:
                type: string
                description: "Updated type of medical record."
                example: "Radiology"
              diagnosis:
                type: string
                description: "Updated diagnosis details."
                example: "No significant findings."
              notes:
                type: string
                description: "Additional notes."
                example: "Next check-up in a month."
              status:
                type: string
                description: "Updated status of the record."
                example: "final"
              practitioner_name:
                type: string
                description: "Updated name of the practitioner."
                example: "Dr. Jane Doe"
      responses:
        "200":
          description: "Medical record updated successfully."
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Medical Record successfully updated"
              data:
                type: object
                properties:
                  record_id:
                    type: integer
                    example: 123
                  record_name:
                    type: string
                    example: "Updated Blood Test"
        "400":
          description: "Bad request due to invalid or missing input data."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "BAD_REQUEST"
              message:
                type: string
                example: "Record name is required."
        "404":
          description: "Record not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "RECORD_NOT_FOUND"
              message:
                type: string
                example: "Medical record not found."
        "500":
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /delete_record/{record_id}:
    delete:
      tags:
        - "MedicalRecords"
      summary: "Delete a specific medical record"
      description: "Deletes a medical record identified by the given record ID. Also deletes any associated files from Firebase, if applicable."
      parameters:
        - name: record_id
          in: path
          required: true
          description: "ID of the medical record to be deleted."
          schema:
            type: string
      responses:
        "200":
          description: "Medical record deleted successfully."
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Medical record 123 successfully deleted!"
              status:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 200
        "404":
          description: "Medical record not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "RECORD_NOT_FOUND"
              msg:
                type: string
                example: "Medical record not found."
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 404
        "500":
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 500
              msg:
                type: string
                example: "An unexpected error occurred."

  /delete_file:
    delete:
      tags:
        - "Files"
      summary: "Delete a file from Firebase"
      description: "Deletes a file from Firebase based on the provided file path."
      parameters:
        - in: body
          name: body
          required: true
          description: "JSON payload containing the path of the file to delete."
          schema:
            type: object
            properties:
              file_path:
                type: string
                description: "Path of the file to delete."
                example: "path/to/file.ext"
      responses:
        "200":
          description: "File successfully deleted from Firebase."
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "File successfully deleted."
              status:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 200
        "400":
          description: "Bad request due to missing file path."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "BAD_REQUEST"
              msg:
                type: string
                example: "File path is required."
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 400
        "500":
          description: "Internal server error during file deletion."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              msg:
                type: string
                example: "An unexpected error occurred."
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 500

  /user:
    get:
      tags:
        - "UserOperations"
      summary: Retrieve user information
      description: Get user information by ID or email. Returns user details if found.
      parameters:
        - name: email
          in: query
          required: false
          description: Email of the user to retrieve.
          schema:
            type: string
        - name: id
          in: query
          required: false
          description: ID of the user to retrieve.
          schema:
            type: string
      security:
        - jwt: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: integer
                  data:
                    type: object
                    additionalProperties: true
        "400":
          description: Missing criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

    post:
      tags:
        - "UserOperations"
      summary: Retrieve user information
      description: Use the POST method to retrieve user information by ID or email. Similar to the GET method.
      parameters:
        - name: email
          in: query
          required: false
          description: Email of the user to retrieve.
          schema:
            type: string
        - name: id
          in: query
          required: false
          description: ID of the user to retrieve.
          schema:
            type: string
      security:
        - jwt: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: integer
                  data:
                    type: object
                    additionalProperties: true
        "400":
          description: Missing criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /user/{user_id}:
    get:
      tags:
        - "UserOperations"
      summary: Retrieve specific user information
      description: Get information about a specific user by user ID.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to retrieve.
          schema:
            type: string
      security:
        - jwt: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: integer
                  data:
                    type: object
                    additionalProperties: true
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /update_user/{user_id}:
    put:
      tags:
        - "UserOperations"
      summary: Update user information
      description: Update the authenticated user's information.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to update.
          schema:
            type: string
        - name: body
          in: body
          required: true
          description: User information to update.
          schema:
            type: object
            properties:
              full_name:
                type: string
                example: "John Doe"
              phone_number:
                type: string
                example: "+1234567890"
              gender:
                type: string
                example: "male"
              address:
                type: string
                example: "123 Main St, Anytown, USA"
              age:
                type: integer
                example: 30
      security:
        - jwt: []
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully."
                  user:
                    type: object
                    additionalProperties: true
        "403":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /delete_user/{user_id}:
    delete:
      tags:
        - "UserOperations"
      summary: Delete user account
      description: Delete the authenticated user's account.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: string
      security:
        - jwt: []
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully."
        "403":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /upload-profile-picture/{user_id}:
    post:
      tags:
        - "UserOperations"
      summary: Upload a profile picture
      description: Upload a profile picture for the authenticated user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to upload the profile picture for.
          schema:
            type: string
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: integer
                  msg:
                    type: string
                  data:
                    type: string
        "400":
          description: Invalid file or no file uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: integer
                  error:
                    type: string
                  msg:
                    type: string
        "403":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /save-medications:
    post:
      tags:
        - "Medications"
      summary: "Save medications for a user"
      description: |
        Saves a list of medications provided as a list of dictionaries for the authenticated user. 
        Each medication must include the 'name', 'when', 'time', and 'count' fields.
      parameters:
        - in: body
          name: body
          required: true
          description: "List of medications to save."
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  example: "Aspirin"
                  description: "Name of the medication."
                when:
                  type: string
                  example: "2024-10-16"
                  description: "Date when the medication should be taken."
                time:
                  type: string
                  example: "08:00"
                  description: "Time when the medication should be taken."
                count:
                  type: integer
                  example: 30
                  description: "Count of the medication."
      responses:
        201:
          description: "Medications saved successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              medications:
                type: array
                items:
                  $ref: "#/definitions/Medication"
        400:
          description: "Invalid input or missing fields."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INVALID_INPUT"
              message:
                type: string
                example: "Medications should be provided as a list of dictionaries."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /get-medications:
    post:
      tags:
        - "Medications"
      summary: "Retrieve medications for a user"
      description: |
        Retrieves medications based on provided filters. If no filters are provided, it returns all medications for the authenticated user.
      parameters:
        - in: body
          name: body
          required: false
          description: "Filters for retrieving medications."
          schema:
            type: object
            properties:
              med_id:
                type: string
                example: "med-id-123"
                description: "ID of the medication to fetch."
              id:
                type: integer
                example: 1
                description: "Specific medication ID to fetch."
              name:
                type: string
                example: "Aspirin"
                description: "Name of the medication to filter by."
              dosage:
                type: string
                example: "500mg"
                description: "Dosage of the medication to filter by."
              status:
                type: string
                example: "active"
                description: "Status of the medication."
              created_at:
                type: string
                example: "2024-10-16 08:00:00"
                description: "Creation timestamp for filtering."
              updated_at:
                type: string
                example: "2024-10-16 09:00:00"
                description: "Update timestamp for filtering."
              when:
                type: string
                example: "08:00"
                description: "Time for filtering medications."
      responses:
        200:
          description: "Medications retrieved successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              medications:
                type: array
                items:
                  $ref: "#/definitions/Medication"
        404:
          description: "No medications found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "NO_MEDICATIONS_FOUND"
              message:
                type: string
                example: "No medications found."
        400:
          description: "Invalid datetime format."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INVALID_DATETIME_FORMAT"
              message:
                type: string
                example: "Invalid format for created_at. Use YYYY-MM-DD HH:MM:SS."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /update-medications/{med_id}:
    put:
      tags:
        - "Medications"
      summary: "Update a medication for a user"
      description: |
        Updates the details of a specific medication for the authenticated user.
      parameters:
        - in: path
          name: med_id
          required: true
          type: string
          description: "ID of the medication to update."
        - in: body
          name: body
          required: true
          description: "Updated medication details."
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Aspirin"
                description: "Name of the medication."
              when:
                type: string
                example: "2024-10-16"
                description: "Date when the medication should be taken."
              time:
                type: string
                example: "08:00"
                description: "Time when the medication should be taken."
              status:
                type: string
                example: "active"
                description: "Status of the medication."
              count:
                type: integer
                example: 30
                description: "Count of the medication."
      responses:
        200:
          description: "Medication updated successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              medication:
                $ref: "#/definitions/Medication"
        404:
          description: "Medication not found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "MEDICATION_NOT_FOUND"
              message:
                type: string
                example: "Medication not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /delete-medications/{med_id}:
    delete:
      tags:
        - "Medications"
      summary: "Delete a medication for a user"
      description: "Deletes a specific medication for the authenticated user."
      parameters:
        - in: path
          name: med_id
          required: true
          type: string
          description: "ID of the medication to delete."
      responses:
        200:
          description: "Medication deleted successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              message:
                type: string
                example: "Medication deleted successfully!"
        404:
          description: "Medication not found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "MEDICATION_NOT_FOUND"
              message:
                type: string
                example: "Medication not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

definitions:
  Appointment:
    type: object
    properties:
      id:
        type: integer
        description: "Unique identifier for the appointment."
      user_id:
        type: string
        description: "ID of the user who created the appointment."
      start_time:
        type: string
        format: date-time
        description: "Start time of the appointment."
      end_time:
        type: string
        format: date-time
        description: "End time of the appointment."
      description:
        type: string
        description: "Description of the appointment."
      doctor_id:
        type: integer
        description: "ID of the doctor assigned to the appointment."
      status:
        type: string
        description: "Current status of the appointment."
      created_at:
        type: string
        format: date-time
        description: "Date and time when the appointment was created."
      updated_at:
        type: string
        format: date-time
        description: "Date and time when the appointment was last updated."

  User:
    type: object
    properties:
      id:
        type: integer
        description: "Unique identifier for the user."
      full_name:
        type: string
        description: "Full name of the user."
      email:
        type: string
        description: "Email address of the user."
      phone_number:
        type: string
        description: "Phone number of the user."
      gender:
        type: string
        description: "Gender of the user."
      address:
        type: string
        description: "Address of the user."
      age:
        type: integer
        description: "Age of the user."
      created_at:
        type: string
        format: date-time
        description: "Date and time when the user was created."
      updated_at:
        type: string
        format: date-time
        description: "Date and time when the user was last updated."

  MedicalRecord:
    type: object
    properties:
      id:
        type: string
        description: "The ID of the medical record"
        example: "rec123"
      record_name:
        type: string
        description: "Name of the medical record"
        example: "X-ray results"
      health_care_provider:
        type: string
        description: "Name of the health care provider"
        example: "City Hospital"
      type_of_record:
        type: string
        description: "Type of the medical record"
        example: "Radiology"
      diagnosis:
        type: string
        description: "Diagnosis details"
        example: "Fractured leg"
      notes:
        type: string
        description: "Notes about the record"
        example: "Patient advised to rest"
      file_path:
        type: string
        description: "File path for any attached documents"
        example: "/files/record123.pdf"
      status:
        type: string
        description: "Status of the record"
        example: "final"
      practitioner_name:
        type: string
        description: "Name of the medical practitioner"
        example: "Dr. John Doe"

  Medication:
    type: object
    properties:
      med_id:
        type: string
        example: "med-id-123"
        description: "ID of the medication."
      name:
        type: string
        example: "Aspirin"
        description: "Name of the medication."
      when:
        type: string
        example: "2024-10-16"
        description: "Date when the medication should be taken."
      time:
        type: string
        example: "08:00"
        description: "Time when the medication should be taken."
      status:
        type: string
        example: "active"
        description: "Status of the medication (upcoming/completed/missed)."
      count:
        type: integer
        example: 30
        description: "Count of the medication."
      created_at:
        type: string
        format: date-time
        example: "2024-10-16T08:00:00Z"
        description: "Creation timestamp of the medication."
      updated_at:
        type: string
        format: date-time
        example: "2024-10-16T09:00:00Z"
        description: "Update timestamp of the medication."

  MedicationList:
    type: object
    properties:
      status:
        type: string
        example: "SUCCESS"
        description: "Response status."
      medications:
        type: array
        items:
          $ref: "#/definitions/Medication"

securityDefinitions:
  jwt:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT authorization token. Format: Bearer {token}"
