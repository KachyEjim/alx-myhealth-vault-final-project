swagger: "2.0"
info:
  description: "API for managing patients appointments and medical records."
  version: "1.0.0"
  title: "Patient Management  API"

basePath: /api
schemes:
  - https
  - http
paths:
  /signup:
    post:
      tags:
        - "UserAuth"
      summary: "Register a new user"
      description: |
        Registers a new user by creating an account with required details
        (full name, email, password) and optional fields (phone number, address, gender, age).
      parameters:
        - in: body
          name: body
          required: true
          description: "User registration details"
          schema:
            type: object
            properties:
              full_name:
                type: string
                example: "John Doe"
                description: "Full name of the user"
              email:
                type: string
                example: "john.doe@example.com"
                description: "Email address of the user"
              password:
                type: string
                example: "your_secure_password"
                description: "User's password (required)"
              phone_number:
                type: string
                example: "+1234567890"
                description: "User's phone number (optional)"
              gender:
                type: string
                enum: ["Male", "Female", "Other"]
                default: "Other"
                description: "User's gender (optional)"
              address:
                type: string
                example: "123 Main Street, City, Country"
                description: "User's address (optional)"
              age:
                type: integer
                example: 30
                description: "User's age (optional)"
      responses:
        201:
          description: "User registered successfully"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "User registered successfully! Verification email sent."
              status:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 201
              data:
                $ref: "#/definitions/User" # Assuming User is defined under `definitions`
        400:
          description: "Missing required fields or email already in use"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "MISSING_FIELDS or USER_EXISTS"
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 400
              msg:
                type: string
                example: "Full name, email, and password are required."
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              status:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 500
              msg:
                type: string
                example: "An unexpected error occurred."

/login:
  post:
    tags:
      - "UserAuth"
    summary: "User login"
    description: |
      Authenticates a user by verifying their email and password. 
      Returns access and refresh tokens if successful.
    parameters:
      - in: body
        name: body
        required: true
        description: "Login credentials."
        schema:
          type: object
          properties:
            email:
              type: string
              example: "john.doe@example.com"
              description: "User's email address."
            password:
              type: string
              example: "your_secure_password"
              description: "User's password."
    responses:
      200:
        description: "Login successful."
        schema:
          type: object
          properties:
            msg:
              type: string
              example: "Login successful."
              description: "Success message."
            status:
              type: boolean
              example: true
              description: "Indicates whether the login was successful."
            statusCode:
              type: integer
              example: 200
              description: "HTTP status code for successful login."
            access_token:
              type: string
              example: "access_token_here"
              description: "Access token for authorized requests."
            refresh_token:
              type: string
              example: "refresh_token_here"
              description: "Refresh token for renewing access."
            user:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "User ID."
                email:
                  type: string
                  example: "john.doe@example.com"
                  description: "User's email address."
                role:
                  type: string
                  example: "user"
                  description: "User's role."
      401:
        description: "Invalid email or password."
        schema:
          type: object
          properties:
            error:
              type: string
              example: "INVALID_CREDENTIALS"
              description: "Error code for invalid credentials."
            status:
              type: boolean
              example: false
              description: "Indicates whether the login was successful."
            statusCode:
              type: integer
              example: 401
              description: "HTTP status code for invalid credentials."
            msg:
              type: string
              example: "Invalid email or password."
              description: "Error message for invalid credentials."
      403:
        description: "User not verified."
        schema:
          type: object
          properties:
            error:
              type: string
              example: "USER_NOT_VERIFIED"
              description: "Error code for unverified users."
            status:
              type: boolean
              example: false
              description: "Indicates whether the login was successful."
            statusCode:
              type: integer
              example: 403
              description: "HTTP status code for unverified users."
            msg:
              type: string
              example: "Please verify your email before logging in."
              description: "Error message for unverified users."
      500:
        description: "Internal server error."
        schema:
          type: object
          properties:
            error:
              type: string
              example: "INTERNAL_SERVER_ERROR"
              description: "Error code for internal server errors."
            status:
              type: boolean
              example: false
              description: "Indicates whether the login was successful."
            statusCode:
              type: integer
              example: 500
              description: "HTTP status code for server error."
            msg:
              type: string
              example: "An unexpected error occurred."
              description: "Error message for unexpected server errors."

  /verify-email/{token}:
    get:
      tags:
        - "UserAuth"
      summary: "Verify user's email"
      description: |
        Verifies the user's email using the provided JWT token.
      parameters:
        - in: path
          name: token
          required: true
          type: string
          description: "JWT token used for email verification."
      responses:
        200:
          description: "Email verified successfully."
        400:
          description: "Invalid or expired token."
        404:
          description: "User not found."
        500:
          description: "Internal server error."

  /resend-verification:
    post:
      tags:
        - "UserAuth"
      summary: "Resend email verification"
      description: "Resends the email verification link to the provided email address."
      parameters:
        - in: body
          name: body
          required: true
          description: "Email address to resend verification to."
          schema:
            type: object
            properties:
              email:
                type: string
                example: "john.doe@example.com"
                description: "User's email address."
      responses:
        200:
          description: "Verification email resent successfully."
        400:
          description: "Email address not found."
        500:
          description: "Internal server error."
  /create_appointment/{user_id}:
    post:
      tags:
        - "Appointment"
      summary: "Create a new appointment for a user"
      description: |
        Allows a user to create an appointment by providing necessary details 
        such as start time, end time, description, and doctor ID.
      parameters:
        - in: path
          name: user_id
          required: true
          type: string
          description: "ID of the user for whom the appointment is being created."
        - in: body
          name: body
          required: true
          description: "Details of the appointment to be created."
          schema:
            type: object
            properties:
              start_time:
                type: string
                format: date-time
                example: "2024-10-15T14:00:00"
                description: "Start time of the appointment in ISO 8601 format."
              end_time:
                type: string
                format: date-time
                example: "2024-10-15T15:00:00"
                description: "End time of the appointment in ISO 8601 format."
              description:
                type: string
                example: "General consultation"
                description: "Brief description of the appointment."
              doctor_id:
                type: integer
                example: 2
                description: "ID of the doctor assigned to the appointment."
              status:
                type: string
                example: "pending"
                description: "Current status of the appointment."
      responses:
        201:
          description: "Appointment successfully created."
          schema:
            $ref: "#/definitions/Appointment"
        400:
          description: "Bad Request: Missing required fields or no input data found."
        404:
          description: "User not found."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /user_appointments/{user_id}:
    get:
      tags:
        - "Appointment"
      summary: "Retrieve appointments for a user"
      description: |
        Fetches appointments for a specific user with optional sorting 
        and limit filters.
      parameters:
        - in: path
          name: user_id
          required: true
          type: string
          description: "ID of the user whose appointments are being retrieved."
        - in: query
          name: limit
          type: integer
          description: "Limit the number of results. Default is 10."
        - in: query
          name: sort_by
          type: string
          default: "appointment_date"
          description: "Field to sort appointments by. Default is appointment_date."
        - in: query
          name: sort_order
          type: string
          enum: [asc, desc]
          default: "desc"
          description: "Sorting order for appointments: 'asc' or 'desc'."
      responses:
        200:
          description: "List of user appointments."
          schema:
            type: array
            items:
              $ref: "#/definitions/Appointment"
        404:
          description: "User not found or no appointments available."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /update_appointment/{appointment_id}:
    put:
      tags:
        - "Appointment"
      summary: "Update an existing appointment"
      description: |
        Updates the details of an appointment, including start time, 
        end time, description, doctor ID, and status.
      parameters:
        - in: path
          name: appointment_id
          required: true
          type: integer
          description: "ID of the appointment to be updated."
        - in: body
          name: body
          required: true
          description: "Updated appointment details."
          schema:
            type: object
            properties:
              start_time:
                type: string
                format: date-time
                example: "2024-10-16T15:00:00"
                description: "New start time of the appointment in ISO 8601 format."
              end_time:
                type: string
                format: date-time
                example: "2024-10-16T16:00:00"
                description: "New end time of the appointment in ISO 8601 format."
              description:
                type: string
                example: "Updated appointment description"
                description: "Updated description of the appointment."
              doctor_id:
                type: integer
                description: "Updated ID of the doctor assigned to the appointment."
              status:
                type: string
                example: "confirmed"
                description: "Updated status of the appointment."
      responses:
        200:
          description: "Appointment successfully updated."
          schema:
            $ref: "#/definitions/Appointment"
        404:
          description: "Appointment not found."
        400:
          description: "No input data found."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []

  /delete_appointment/{appointment_id}:
    delete:
      tags:
        - "Appointment"
      summary: "Delete an appointment"
      description: "Deletes an appointment by its ID."
      parameters:
        - in: path
          name: appointment_id
          required: true
          type: integer
          description: "ID of the appointment to be deleted."
      responses:
        200:
          description: "Appointment successfully deleted."
        404:
          description: "Appointment not found."
        500:
          description: "Internal Server Error."
      security:
        - jwt: []
  /appointments:
    get:
      tags:
        - "Appointment"
      summary: "Retrieve appointments"
      description: "Fetch a list of appointments with optional filtering by status."
      parameters:
        - in: query
          name: user_id
          required: false
          description: "ID of the user whose appointments are being retrieved."
          type: integer
        - in: query
          name: status
          required: false
          description: "Filter appointments by status (upcoming, completed, missed, canceled)."
          type: string
          enum:
            - upcoming
            - completed
            - missed
            - canceled
        - in: query
          name: limit
          required: false
          description: "Limit the number of results returned."
          type: integer
        - in: query
          name: sort_by
          required: false
          description: "Field to sort results by (e.g., start_time, status)."
          type: string
        - in: query
          name: sort_order
          required: false
          description: "Sorting order: 'asc' or 'desc'."
          type: string
          enum:
            - asc
            - desc
      responses:
        200:
          description: "List of appointments retrieved successfully."
          schema:
            type: array
            items:
              $ref: "#/definitions/Appointment"
        404:
          description: "User not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "USER_NOT_FOUND"
              message:
                type: string
                example: "User not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /create_record/{user_id}:
    post:
      tags:
        - "MedicalRecords"
      summary: "Create a new medical record"
      description: "Creates a new medical record for a specified user."
      parameters:
        - name: user_id
          in: path
          required: true
          description: "ID of the user for whom the medical record is being created."
          schema:
            type: string
        - in: body
          name: body
          required: true
          description: "Details of the medical record to be created."
          schema:
            type: object
            properties:
              record_name:
                type: string
                description: "Name of the medical record."
                example: "Blood Test"
              health_care_provider:
                type: string
                description: "Name of the healthcare provider."
                example: "Dr. Smith"
              type_of_record:
                type: string
                description: "Type of medical record."
                example: "Lab Report"
              diagnosis:
                type: string
                description: "Diagnosis details."
                example: "Anemia"
              notes:
                type: string
                description: "Additional notes."
                example: "Follow up in 2 weeks."
              file_path:
                type: string
                description: "File path to any attached document."
                example: "/path/to/document.pdf"
              status:
                type: string
                description: "Status of the record."
                example: "draft"
              practitioner_name:
                type: string
                description: "Name of the practitioner."
                example: "Dr. Jane Doe"
      responses:
        "201":
          description: "Medical record created successfully."
          schema:
            type: object
            properties:
              record_id:
                type: integer
                example: 123
        "400":
          description: "Bad request. Invalid or missing input data."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "BAD_REQUEST"
              message:
                type: string
                example: "Record name is required."
        "404":
          description: "User not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "USER_NOT_FOUND"
              message:
                type: string
                example: "User not found."
        "500":
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /user_records/{user_id}:
    get:
      tags:
        - "MedicalRecords"
      summary: "Get user's medical records"
      description: "Retrieves a list of medical records for a specified user."
      parameters:
        - name: user_id
          in: path
          required: true
          description: "ID of the user whose medical records are being retrieved."
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: "Limit the number of results returned."
          schema:
            type: integer
        - name: sort_by
          in: query
          required: false
          description: "Field to sort results by (e.g., record_name, diagnosis)."
          schema:
            type: string
        - name: sort_order
          in: query
          required: false
          description: "Sorting order: 'asc' or 'desc'."
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: "List of medical records retrieved successfully."
          schema:
            type: array
            items:
              $ref: "#/definitions/MedicalRecord"
        "404":
          description: "User not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "USER_NOT_FOUND"
              message:
                type: string
                example: "User not found."
        "500":
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /update_record/{record_id}:
    put:
      tags:
        - "MedicalRecords"
      summary: "Update a medical record"
      description: "Updates the details of an existing medical record."
      parameters:
        - name: record_id
          in: path
          required: true
          description: "ID of the medical record to be updated."
          schema:
            type: integer
        - in: body
          name: body
          required: true
          description: "Updated medical record details."
          schema:
            type: object
            properties:
              record_name:
                type: string
                description: "Updated name of the medical record."
              health_care_provider:
                type: string
                description: "Updated name of the healthcare provider."
              type_of_record:
                type: string
                description: "Updated type of medical record."
              diagnosis:
                type: string
                description: "Updated diagnosis details."
              notes:
                type: string
                description: "Updated additional notes."
              file_path:
                type: string
                description: "Updated file path to any attached document."
              status:
                type: string
                description: "Updated status of the record."
              practitioner_name:
                type: string
                description: "Updated name of the practitioner."
      responses:
        "200":
          description: "Medical record updated successfully."
        "404":
          description: "Medical record not found."
        "400":
          description: "Bad request. Invalid or missing input data."
        "500":
          description: "Internal server error."

  /delete_record/{record_id}:
    delete:
      tags:
        - "MedicalRecords"
      summary: "Delete a medical record"
      description: "Deletes a medical record by its ID."
      parameters:
        - name: record_id
          in: path
          required: true
          description: "ID of the medical record to be deleted."
          schema:
            type: integer
      responses:
        "200":
          description: "Medical record deleted successfully."
        "404":
          description: "Medical record not found."
        "500":
          description: "Internal server error."
  /user:
    get:
      tags:
        - "UserOperations"
      summary: Retrieve user information
      description: Get user information by ID or email.
      parameters:
        - name: email
          in: query
          required: false
          description: Email of the user to retrieve.
          schema:
            type: string
        - name: id
          in: query
          required: false
          description: ID of the user to retrieve.
          schema:
            type: string
      security:
        - jwt: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    additionalProperties: true
        "400":
          description: Missing criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /update_user/{user_id}:
    put:
      tags:
        - "UserOperations"
      summary: Update user information
      description: Update the authenticated user's information.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to update.
          schema:
            type: string
        - name: body
          in: body
          required: true
          description: User information to update.
          schema:
            type: object
            properties:
              full_name:
                type: string
                example: "John Doe"
              phone_number:
                type: string
                example: "+1234567890"
              gender:
                type: string
                example: "male"
              address:
                type: string
                example: "123 Main St, Anytown, USA"
              age:
                type: integer
                example: 30
      security:
        - jwt: []
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully."
                  user:
                    type: object
                    additionalProperties: true
        "403":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /delete_user/{user_id}:
    delete:
      tags:
        - "UserOperations"
      summary: Delete user account
      description: Delete the authenticated user's account.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: string
      security:
        - jwt: []
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully."
        "403":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /upload-profile-picture/{user_id}:
    post:
      tags:
        - "UserOperations"
      summary: Upload profile picture
      description: Upload a profile picture for the authenticated user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to upload the profile picture.
          schema:
            type: string
        - name: image
          in: formData
          required: true
          description: The image file to upload.
          type: file
      security:
        - jwt: []
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  success:
                    type: string
                    example: "true"
                  message:
                    type: string
                    example: "Image uploaded successfully."
                  image_url:
                    type: string
                    example: "http://example.com/path/to/image.jpg"
        "403":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  error:
                    type: string
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  error:
                    type: string
                  message:
                    type: string
  /save-medications:
    post:
      tags:
        - "Medications"
      summary: "Save medications for a user"
      description: |
        Saves a list of medications provided as a list of dictionaries for the authenticated user. 
        Each medication must include the 'name', 'when', and 'time' fields.
      parameters:
        - in: body
          name: body
          required: true
          description: "List of medications to save."
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  example: "Aspirin"
                  description: "Name of the medication."
                when:
                  type: string
                  example: "2024-10-16"
                  description: "Date when the medication should be taken."
                time:
                  type: string
                  example: "08:00"
                  description: "Time when the medication should be taken."
      responses:
        201:
          description: "Medications saved successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              medications:
                type: array
                items:
                  $ref: "#/definitions/Medication"
        400:
          description: "Invalid input or missing fields."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INVALID_INPUT"
              message:
                type: string
                example: "Medications should be provided as a list of dictionaries."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /get-medications:
    post:
      tags:
        - "Medications"
      summary: "Retrieve medications for a user"
      description: |
        Retrieves medications based on provided filters. If no filters are provided, it returns all medications for the authenticated user.
      parameters:
        - in: body
          name: body
          required: false
          description: "Filters for retrieving medications."
          schema:
            type: object
            properties:
              med_id:
                type: string
                example: "med-id-123"
                description: "ID of the medication to fetch."
              id:
                type: integer
                example: 1
                description: "Specific medication ID to fetch."
              name:
                type: string
                example: "Aspirin"
                description: "Name of the medication to filter by."
              dosage:
                type: string
                example: "500mg"
                description: "Dosage of the medication to filter by."
              status:
                type: string
                example: "active"
                description: "Status of the medication."
              created_at:
                type: string
                example: "2024-10-16 08:00:00"
                description: "Creation timestamp for filtering."
              updated_at:
                type: string
                example: "2024-10-16 09:00:00"
                description: "Update timestamp for filtering."
              when:
                type: string
                example: "08:00"
                description: "Time for filtering medications."
      responses:
        200:
          description: "Medications retrieved successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              medications:
                type: array
                items:
                  $ref: "#/definitions/Medication"
        404:
          description: "No medications found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "NO_MEDICATIONS_FOUND"
              message:
                type: string
                example: "No medications found."
        400:
          description: "Invalid datetime format."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INVALID_DATETIME_FORMAT"
              message:
                type: string
                example: "Invalid format for created_at. Use YYYY-MM-DD HH:MM:SS."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /medications:
    get:
      tags:
        - "Medications"
      summary: "Get all medications for a user"
      description: |
        Retrieves all medications associated with the authenticated user.
      responses:
        200:
          description: "Medications retrieved successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              medications:
                type: array
                items:
                  $ref: "#/definitions/Medication"
        404:
          description: "No medications found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "NO_MEDICATIONS_FOUND"
              message:
                type: string
                example: "No medications found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /update-medications/{med_id}:
    put:
      tags:
        - "Medications"
      summary: "Update a specific medication"
      description: |
        Updates the details of a specific medication for the authenticated user based on the provided medication ID.
      parameters:
        - in: path
          name: med_id
          required: true
          type: string
          description: "ID of the medication to update."
        - in: body
          name: body
          required: true
          description: "Updated medication details."
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Aspirin"
                description: "Updated name of the medication."
              when:
                type: string
                example: "2024-10-16"
                description: "Updated date for taking the medication."
              time:
                type: string
                example: "09:00"
                description: "Updated time for taking the medication."
              status:
                type: string
                example: "active"
                description: "Updated status of the medication."
      responses:
        200:
          description: "Medication updated successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              message:
                type: string
                example: "Medication updated successfully!"
              medication:
                $ref: "#/definitions/Medication"
        404:
          description: "Medication not found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "MEDICATION_NOT_FOUND"
              message:
                type: string
                example: "Medication not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

  /delete-medications/{med_id}:
    delete:
      tags:
        - "Medications"
      summary: "Delete a specific medication"
      description: |
        Deletes a specific medication for the authenticated user based on the provided medication ID.
      parameters:
        - in: path
          name: med_id
          required: true
          type: string
          description: "ID of the medication to delete."
      responses:
        200:
          description: "Medication deleted successfully."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              message:
                type: string
                example: "Medication deleted successfully!"
        404:
          description: "Medication not found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "MEDICATION_NOT_FOUND"
              message:
                type: string
                example: "Medication not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ERROR"
              error:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."

definitions:
  Appointment:
    type: object
    properties:
      id:
        type: integer
        description: "Unique identifier for the appointment."
      user_id:
        type: string
        description: "ID of the user who created the appointment."
      start_time:
        type: string
        format: date-time
        description: "Start time of the appointment."
      end_time:
        type: string
        format: date-time
        description: "End time of the appointment."
      description:
        type: string
        description: "Description of the appointment."
      doctor_id:
        type: integer
        description: "ID of the doctor assigned to the appointment."
      status:
        type: string
        description: "Current status of the appointment."
      created_at:
        type: string
        format: date-time
        description: "Date and time when the appointment was created."
      updated_at:
        type: string
        format: date-time
        description: "Date and time when the appointment was last updated."

  User:
    type: object
    properties:
      id:
        type: integer
        description: "Unique identifier for the user."
      full_name:
        type: string
        description: "Full name of the user."
      email:
        type: string
        description: "Email address of the user."
      phone_number:
        type: string
        description: "Phone number of the user."
      gender:
        type: string
        description: "Gender of the user."
      address:
        type: string
        description: "Address of the user."
      age:
        type: integer
        description: "Age of the user."
      created_at:
        type: string
        format: date-time
        description: "Date and time when the user was created."
      updated_at:
        type: string
        format: date-time
        description: "Date and time when the user was last updated."
  MedicalRecord:
    type: object
    properties:
      id:
        type: string
        description: "The ID of the medical record"
        example: "rec123"
      record_name:
        type: string
        description: "Name of the medical record"
        example: "X-ray results"
      health_care_provider:
        type: string
        description: "Name of the health care provider"
        example: "City Hospital"
      type_of_record:
        type: string
        description: "Type of the medical record"
        example: "Radiology"
      diagnosis:
        type: string
        description: "Diagnosis details"
        example: "Fractured leg"
      notes:
        type: string
        description: "Notes about the record"
        example: "Patient advised to rest"
      file_path:
        type: string
        description: "File path for any attached documents"
        example: "/files/record123.pdf"
      status:
        type: string
        description: "Status of the record"
        example: "final"
      practitioner_name:
        type: string
        description: "Name of the medical practitioner"
        example: "Dr. John Doe"
  Medication:
    type: object
    properties:
      med_id:
        type: string
        example: "med-id-123"
        description: "ID of the medication."
      name:
        type: string
        example: "Aspirin"
        description: "Name of the medication."
      when:
        type: string
        example: "2024-10-16"
        description: "Date when the medication should be taken."
      time:
        type: string
        example: "08:00"
        description: "Time when the medication should be taken."
      status:
        type: string
        example: "active"
        description: "Status of the medication (upcoming/completed/missed)."
      created_at:
        type: string
        example: "2024-10-16 08:00:00"
        description: "Creation timestamp of the medication."
      updated_at:
        type: string
        example: "2024-10-16 09:00:00"
        description: "Update timestamp of the medication."

securityDefinitions:
  jwt:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT authorization token. Format: Bearer {token}"
